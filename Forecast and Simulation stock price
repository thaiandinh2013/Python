# Python
Forecast and Simulation stock price 
In this project, I will download information about some stocks from Yahoo Finance .
and then  I will explore and visualize the data tosee
how the stocks perfomed overtime, how they are correlated with each other.
Next , I will perform risk analysis using VAR(value at risk) method. 
Lastly , I will do Monte Carlo simulations to predict how the stock can perform in the future

#Import some packages 
    import pandas as pd
    from pandas import Series,DataFrame
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    sns.set_style('whitegrid')
    %matplotlib inline
    rom pandas.io.data import DataReader
    from datetime import datetime
    from __future__ import division

# Below is the stocks that will be used for analysis(Apple, Google, MSN, Amazon)
    tech_list = ['AAPL','GOOG','MSFT','AMZN']

# Set up End and Start times for data grab
    end = datetime.now()
    start = datetime(end.year - 1,end.month,end.day)


#For loop for grabing yahoo finance data and setting as a dataframe

    for stock in tech_list:   
# Set DataFrame as the Stock Ticker
    globals()[stock] = DataReader(stock,'yahoo',start,end)

# Summary Stats
    AAPL.describe()
    GOOG.describe()
    MSFT.describe()
    AMZN.describe()

# General Info
    AAPL.info()
    GOOG.info()
    MSFT.info()
    AMZN.info()

# Historical view of the closing price
    AAPL['Adj Close'].plot(legend=True,figsize=(10,4))

# Plot the total volume of stock being traded each day over the past 5 years
    AAPL['Volume'].plot(legend=True,figsize=(10,4))

# Calculate and plot out several moving averages
    ma_day = [10,20,50]

    for ma in ma_day:
        column_name = "MA for %s days" %(str(ma))
        AAPL[column_name]=pd.rolling_mean(AAPL['Adj Close'],ma)
    AAPL[['Adj Close','MA for 10 days','MA for 20 days','MA for 50 days']].plot(subplots=False,figsize=(10,4))

# Find the percent change for each day
    AAPL['Daily Return'] = AAPL['Adj Close'].pct_change()
# Plot the daily return percentage
    AAPL['Daily Return'].plot(figsize=(12,4),legend=True,linestyle='--',marker='o')

#use seaborn to create both a histogram and kde plot on the same figure.
    sns.distplot(AAPL['Daily Return'].dropna(),bins=100,color='purple')

# Grab all the closing prices for the tech stock list into one DataFrame
    closing_df = DataReader(['AAPL','GOOG','MSFT','AMZN'],'yahoo',start,end)['Adj Close']

# Let's take a quick look
    closing_df.head()

##Compare the daily percentage return of two stocks to check correlation 
# We'll use joinplot to compare the daily returns of Google and Microsoft
    sns.jointplot('GOOG','MSFT',tech_rets,kind='scatter')

#Call pairplot on our DataFrame for an automatic visual analysis of all the comparisons
    sns.pairplot(tech_rets.dropna())

#Use sebron for a quick correlation plot for the daily returns
    sns.corrplot(tech_rets.dropna(),annot=True)

###RISK ANALYSIS
# Definie a new DataFrame as a clenaed version of the oriignal tech_rets DataFrame
    rets = tech_rets.dropna()
    area = np.pi*20
    plt.scatter(rets.mean(), rets.std(),alpha = 0.5,s =area)

# Set the x and y limits of the plot 
    plt.ylim([0.01,0.025])
    plt.xlim([-0.003,0.004])

#Set the plot axis titles
    plt.xlabel('Expected returns')
    plt.ylabel('Risk')

# Label the scatter plots
    for label, x, y in zip(rets.columns, rets.mean(), rets.std()):
    plt.annotate(label, xy = (x, y), xytext = (50, 50),textcoords = 'offset points', ha = 'right', va = 'bottom',
    arrowprops = dict(arrowstyle = '-', connectionstyle = 'arc3,rad=-0.3'))

##Value at risk using the "bootstrap" method
    sns.distplot(AAPL['Daily Return'].dropna(),bins=100,color='purple')
    rets['AAPL'].quantile(0.05)


##Value at Risk using the Monte Carlo method
# Set up our time horizon
    days = 365

# Now our delta
    dt = 1/days
    mu = rets.mean()['GOOG']

# Grab the volatility of the stock from the std() of the average return
    sigma = rets.std()['GOOG']
    def stock_monte_carlo(start_price,days,mu,sigma):
# Define a price array
   price = np.zeros(days)
     price[0] = start_price
# Schok and Drift
    shock = np.zeros(days)
    drift = np.zeros(days)
# Run price array for number of days
    for x in xrange(1,days):

# Calculate Schock
    shock[x] = np.random.normal(loc=mu * dt, scale=sigma * np.sqrt(dt))
 # Calculate Drift
    drift[x] = mu * dt
# Calculate Price
    price[x] = price[x-1] + (price[x-1] * (drift[x] + shock[x]))
    return price

# Get start price from GOOG.head()
    start_price = 569.85
    for run in xrange(100):
    plt.plot(stock_monte_carlo(start_price,days,mu,sigma))
    plt.xlabel("Days")
    plt.ylabel("Price")  
    plt.title('Monte Carlo Analysis for Google')

##Get the histogram from simulation result 
# Set a large numebr of runs
    runs = 10000

# Create an empty matrix to hold the end price data
    simulations = np.zeros(runs)

# Set the print options of numpy to only display 0-5 points from an array to suppress output
    np.set_printoptions(threshold=5)
    for run in xrange(runs):    
    # Set the simulation data point as the last stock price for that run
    simulations[run] = stock_monte_carlo(start_price,days,mu,sigma)[days-1];

#use qunatile to define our risk for this stock.
# Now we'lll define q as the 1% empirical qunatile, this basically means that 99% of the values should fall between here
    q = np.percentile(simulations, 1)
    # Now let's plot the distribution of the end prices
    plt.hist(simulations,bins=200)

# Using plt.figtext to fill in some additional information onto the plot

# Starting Price
    plt.figtext(0.6, 0.8, s="Start price: $%.2f" %start_price)
# Mean ending price
    plt.figtext(0.6, 0.7, "Mean final price: $%.2f" % simulations.mean())

# Variance of the price (within 99% confidence interval)
    plt.figtext(0.6, 0.6, "VaR(0.99): $%.2f" % (start_price - q,))

# Display 1% quantile
    plt.figtext(0.15, 0.6, "q(0.99): $%.2f" % q)

# Plot a line at the 1% quantile result
    plt.axvline(x=q, linewidth=4, color='r')
